{"pageProps":{"codeData":{"content":"<h1>Swift</h1>\n<p><a href=\"https://github.com/petercorke/robotics-toolbox-python\"><picture><img alt=\"A Python Robotics Package\" src=\"https://raw.githubusercontent.com/petercorke/robotics-toolbox-python/master/.github/svg/py_collection.min.svg\"></picture></a>\n<a href=\"https://qcr.github.io\"><picture><img alt=\"QUT Centre for Robotics Open Source\" src=\"https://github.com/qcr/qcr.github.io/raw/master/misc/badge.svg\"></picture></a></p>\n<p><a href=\"https://badge.fury.io/py/swift-sim\"><picture><img alt=\"PyPI version\" src=\"https://badge.fury.io/py/swift-sim.svg\"></picture></a>\n<a href=\"https://img.shields.io/pypi/pyversions/swift-sim\"><picture><img alt=\"PyPI - Python Version\" src=\"https://img.shields.io/pypi/pyversions/swift-sim\"></picture></a>\n<a href=\"https://opensource.org/licenses/MIT\"><picture><img alt=\"License: MIT\" src=\"https://img.shields.io/badge/License-MIT-yellow.svg\"></picture></a></p>\n<p>Swift is a light-weight browser-based simulator built on top of the <a href=\"https://github.com/petercorke/robotics-toolbox-python\">Robotics Toolbox for Python</a>. This simulator provides robotics-specific functionality for rapid prototyping of algorithms, research, and education. Built using Python and Javascript, Swift is cross-platform (Linux, MacOS, and Windows) while also leveraging the ubiquity and support of these languages.</p>\n<p>Through the <a href=\"https://github.com/petercorke/robotics-toolbox-python\">Robotics Toolbox for Python</a>, Swift can visualise over 30 supplied robot models: well-known contemporary robots from Franka-Emika, Kinova, Universal Robotics, Rethink as well as classical robots such as the Puma 560 and the Stanford arm. Swift is under development and will support mobile robots in the future.</p>\n<p>Swift provides:</p>\n<ul>\n<li>visualisation of mesh objects (Collada and STL files) and primitive shapes;</li>\n<li>robot visualisation and simulation;</li>\n<li>recording and saving a video of the simulation;</li>\n<li>source code which can be read for learning and teaching;</li>\n</ul>\n<h2>Installing</h2>\n<h3>Using pip</h3>\n<p>Swift is designed to be controlled through the <a href=\"https://github.com/petercorke/robotics-toolbox-python\">Robotics Toolbox for Python</a>. By installing the toolbox through PyPI, swift is installed as a dependency</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">pip3 <span class=\"token function\">install</span> roboticstoolbox-python\n</code></pre>\n<p>Otherwise, Swift can be install by</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">pip3 <span class=\"token function\">install</span> swift-sim\n</code></pre>\n<p>Available options are:</p>\n<ul>\n<li><code>nb</code> provides the ability for Swift to be embedded within a Jupyter Notebook</li>\n<li><code>vision</code> implements an RTC communication strategy allowing for visual feedback from Swift and allows Swift to be run on Google Colab</li>\n</ul>\n<p>Put the options in a comma-separated list like</p>\n<pre class=\"language-shell\"><code class=\"language-shell\">pip3 <span class=\"token function\">install</span> swift-sim<span class=\"token punctuation\">[</span>optionlist<span class=\"token punctuation\">]</span>\n</code></pre>\n<h3>From GitHub</h3>\n<p>To install the latest version from GitHub</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">git</span> clone https://github.com/jhavl/swift.git\n<span class=\"token builtin class-name\">cd</span> swift\npip3 <span class=\"token function\">install</span> -e <span class=\"token builtin class-name\">.</span>\n</code></pre>\n<h2>Code Examples</h2>\n<h3>Robot Plot</h3>\n<p>We will load a model of the Franka-Emika Panda robot and plot it. We set the joint angles of the robot into the ready joint configuration qr.</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> roboticstoolbox <span class=\"token keyword\">as</span> rp\n\npanda <span class=\"token operator\">=</span> rp<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>Panda<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npanda<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>q<span class=\"token operator\">=</span>panda<span class=\"token punctuation\">.</span>qr<span class=\"token punctuation\">)</span>\n</code></pre>\n<p align=\"center\">\n <picture><img alt=\"\" src=\"https://github.com/jhavl/swift/raw/master/.github/figures/panda.png\"></picture>\n</p>\n<h3>Resolved-Rate Motion Control</h3>\n<p>We will load a model of the Franka-Emika Panda robot and make it travel towards a goal pose defined by the variable Tep.</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> roboticstoolbox <span class=\"token keyword\">as</span> rtb\n<span class=\"token keyword\">import</span> spatialmath <span class=\"token keyword\">as</span> sm\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">from</span> swift <span class=\"token keyword\">import</span> Swift\n\n\n<span class=\"token comment\"># Make and instance of the Swift simulator and open it</span>\nenv <span class=\"token operator\">=</span> Swift<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nenv<span class=\"token punctuation\">.</span>launch<span class=\"token punctuation\">(</span>realtime<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Make a panda model and set its joint angles to the ready joint configuration</span>\npanda <span class=\"token operator\">=</span> rtb<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>Panda<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npanda<span class=\"token punctuation\">.</span>q <span class=\"token operator\">=</span> panda<span class=\"token punctuation\">.</span>qr\n\n<span class=\"token comment\"># Set a desired and effector pose an an offset from the current end-effector pose</span>\nTep <span class=\"token operator\">=</span> panda<span class=\"token punctuation\">.</span>fkine<span class=\"token punctuation\">(</span>panda<span class=\"token punctuation\">.</span>q<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> sm<span class=\"token punctuation\">.</span>SE3<span class=\"token punctuation\">.</span>Tx<span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> sm<span class=\"token punctuation\">.</span>SE3<span class=\"token punctuation\">.</span>Ty<span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> sm<span class=\"token punctuation\">.</span>SE3<span class=\"token punctuation\">.</span>Tz<span class=\"token punctuation\">(</span><span class=\"token number\">0.45</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Add the robot to the simulator</span>\nenv<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>panda<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Simulate the robot while it has not arrived at the goal</span>\narrived <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n<span class=\"token keyword\">while</span> <span class=\"token keyword\">not</span> arrived<span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># Work out the required end-effector velocity to go towards the goal</span>\n    v<span class=\"token punctuation\">,</span> arrived <span class=\"token operator\">=</span> rtb<span class=\"token punctuation\">.</span>p_servo<span class=\"token punctuation\">(</span>panda<span class=\"token punctuation\">.</span>fkine<span class=\"token punctuation\">(</span>panda<span class=\"token punctuation\">.</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Tep<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># Set the Panda's joint velocities</span>\n    panda<span class=\"token punctuation\">.</span>qd <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linalg<span class=\"token punctuation\">.</span>pinv<span class=\"token punctuation\">(</span>panda<span class=\"token punctuation\">.</span>jacobe<span class=\"token punctuation\">(</span>panda<span class=\"token punctuation\">.</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> @ v\n    \n    <span class=\"token comment\"># Step the simulator by 50 milliseconds</span>\n    env<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token number\">0.05</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p align=\"center\">\n <video autoplay=\"\" muted=\"\" loop=\"\" poster=\"/_next/static/images/panda-f59953d98709c4ba1e9a3def0afad07a.webp\"><source src=\"/_next/static/images/panda-f59953d98709c4ba1e9a3def0afad07a.webm\" type=\"video/webm\"><source src=\"/_next/static/images/panda-f59953d98709c4ba1e9a3def0afad07a.mp4\" type=\"video/mp4\"></video>\n</p>\n<h3>Embed within a Jupyter Notebook</h3>\n<p>To embed within a Jupyter Notebook Cell, use the <code>browser=\"notebook\"</code> option when launching the simulator.</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Try this example within a Jupyter Notebook Cell!</span>\n<span class=\"token keyword\">import</span> roboticstoolbox <span class=\"token keyword\">as</span> rtb\n<span class=\"token keyword\">import</span> spatialmath <span class=\"token keyword\">as</span> sm\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">from</span> swift <span class=\"token keyword\">import</span> Swift\n\n<span class=\"token comment\"># Make and instance of the Swift simulator and open it</span>\nenv <span class=\"token operator\">=</span> Swift<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nenv<span class=\"token punctuation\">.</span>launch<span class=\"token punctuation\">(</span>realtime<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> browser<span class=\"token operator\">=</span><span class=\"token string\">\"notebook\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Make a panda model and set its joint angles to the ready joint configuration</span>\npanda <span class=\"token operator\">=</span> rtb<span class=\"token punctuation\">.</span>models<span class=\"token punctuation\">.</span>Panda<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npanda<span class=\"token punctuation\">.</span>q <span class=\"token operator\">=</span> panda<span class=\"token punctuation\">.</span>qr\n\n<span class=\"token comment\"># Set a desired and effector pose an an offset from the current end-effector pose</span>\nTep <span class=\"token operator\">=</span> panda<span class=\"token punctuation\">.</span>fkine<span class=\"token punctuation\">(</span>panda<span class=\"token punctuation\">.</span>q<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> sm<span class=\"token punctuation\">.</span>SE3<span class=\"token punctuation\">.</span>Tx<span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> sm<span class=\"token punctuation\">.</span>SE3<span class=\"token punctuation\">.</span>Ty<span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> sm<span class=\"token punctuation\">.</span>SE3<span class=\"token punctuation\">.</span>Tz<span class=\"token punctuation\">(</span><span class=\"token number\">0.45</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Add the robot to the simulator</span>\nenv<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>panda<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Simulate the robot while it has not arrived at the goal</span>\narrived <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n<span class=\"token keyword\">while</span> <span class=\"token keyword\">not</span> arrived<span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># Work out the required end-effector velocity to go towards the goal</span>\n    v<span class=\"token punctuation\">,</span> arrived <span class=\"token operator\">=</span> rtb<span class=\"token punctuation\">.</span>p_servo<span class=\"token punctuation\">(</span>panda<span class=\"token punctuation\">.</span>fkine<span class=\"token punctuation\">(</span>panda<span class=\"token punctuation\">.</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Tep<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># Set the Panda's joint velocities</span>\n    panda<span class=\"token punctuation\">.</span>qd <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linalg<span class=\"token punctuation\">.</span>pinv<span class=\"token punctuation\">(</span>panda<span class=\"token punctuation\">.</span>jacobe<span class=\"token punctuation\">(</span>panda<span class=\"token punctuation\">.</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> @ v\n    \n    <span class=\"token comment\"># Step the simulator by 50 milliseconds</span>\n    env<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token number\">0.05</span><span class=\"token punctuation\">)</span>\n</code></pre>\n","name":"Swift","type":"code","url":"https://github.com/jhavl/swift","image":"repo:/.github/figures/panda.png","_images":["/_next/static/images/panda-f1735ad2d702ae9c686b2f0e727e9941.png.webp","/_next/static/images/panda-c3722217e520e43c10f1bc26fffcd0fd.png"],"src":"/content/robotics_toolbox/swift.md","id":"swift","image_position":"center"}},"__N_SSG":true}