{"pageProps":{"codeData":{"content":"<h1>QCR Code Templates</h1>\n<p><a href=\"https://qcr.github.io\"><picture><img alt=\"QUT Centre for Robotics Open Source\" src=\"https://github.com/qcr/qcr.github.io/raw/master/misc/badge.svg\"></picture></a>\n<picture><img alt=\"Primary language\" src=\"https://img.shields.io/github/languages/top/qcr/code_templates\"></picture>\n<a href=\"./LICENSE.txt\"><picture><img alt=\"License\" src=\"https://img.shields.io/github/license/qcr/code_templates\"></picture></a></p>\n<p><video autoplay=\"\" muted=\"\" loop=\"\" poster=\"/_next/static/images/demo-70a6816faa1e78bf2b6f4c8115a1a047.webp\"><source src=\"/_next/static/images/demo-70a6816faa1e78bf2b6f4c8115a1a047.webm\" type=\"video/webm\"><source src=\"/_next/static/images/demo-70a6816faa1e78bf2b6f4c8115a1a047.mp4\" type=\"video/mp4\">Demo of the ros_package template</video></p>\n<p>This repository defines shared templates for commonly performed actions within the <a href=\"https://research.qut.edu.au/qcr\">QUT Centre for Robotics (QCR)</a>. We've made this project public as most of the templates have a general use case, and aren't directly tied to QCR.</p>\n<p>Templates can be used through a single script, and new templates are created by writing some basic template script in a new folder. The template 'engine' is ~250 lines of (admittedly terse) Bash.</p>\n<h2>How to use a template</h2>\n<p><strong><em>Note: QCR members can access templates directly using the <code>qcr</code> script from <a href=\"https://github.com/qcr/tools\">our tools</a></em></strong></p>\n<p>Clone this Git repository:</p>\n<pre><code>git clone https://github.com/qcr/code_templates\n</code></pre>\n<p>And add the <code>qcr_templates</code> script to your path somewhere if you'd like to use from any directory. We recommend adding it to <code>~/bin</code> directory as follows:</p>\n<pre><code>mkdir ~/bin\nln -s /path/to/code_templates/qcr_templates ~/bin/\n</code></pre>\n<p>Your new projects can be created from a template simply by making a new folder and running the script with your chosen template inside that folder. For example:</p>\n<pre><code>qcr_templates ros_package\n</code></pre>\n<p>This will retrieve the template, and start a prompt asking you for values for your project. In general, it's best to use <a href=\"https://en.wikipedia.org/wiki/Snake_case\">snake_case</a> for programming variable values (i.e. <code>my_variable_value</code> not <code>myVariableValue</code> as our modification function assumes snake_case).</p>\n<h2>How templates work</h2>\n<p>We use a very basic custom templating method in this project, with templates being declared by creating a new folder in this repository. Templates are defined using named variables, the user is prompted at runtime for values for these variables, and then a project is created from the template with the runtime values applied. Variable values can be used to:</p>\n<ul>\n<li>replace in-file values in code / text</li>\n<li>conditionally include blocks of code / text in files</li>\n<li>generate filenames based on variables</li>\n<li>conditionally create files</li>\n</ul>\n<p>Template variable names are typically upper snake case (i.e. <code>MY_VARIABLE</code>), can have default values which will be shown in the prompt, and are evaluated using Bash. This means that any variable with no value is considered false, and all other values considered true. A current limitation is that variables with default values cannot be changed to have no value by the user at runtime.</p>\n<p>Variables are declared in a special file called <code>.variables.yaml</code> at the root of each template, with their syntax described <a href=\"#creating-your-own-templates\">below</a>.</p>\n<h3>In-file text replacement</h3>\n<p>Variables are replaced in text using their runtime value, with the <code>__CAMEL</code> and <code>__PASCAL</code> modifiers supported. For example, the following Python template:</p>\n<pre class=\"language-python\"><code class=\"language-python\">\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MY_VARIABLE__PASCAL</span><span class=\"token punctuation\">:</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>_MY_VARIABLE <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">MY_VARIABLE__CAMEL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>when given <code>MY_VARIABLE='obstacle_detector'</code>, would produce:</p>\n<pre class=\"language-python\"><code class=\"language-python\">\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ObstacleDetector</span><span class=\"token punctuation\">:</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>obstacle_detector <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">obstacleDetector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3>Conditional in-file blocks</h3>\n<p>Variables can also be used to declare whether blocks of code should be included in the output. Blocks begin with a <code>TEMPLATE_START variable_1 variable_2 ...</code> line, and end with a <code>TEMPLATE_END</code> line. The block is included if <em>any</em> of <code>variable_1 variable_2 ...</code> have a value, and will only be excluded if <em>all</em> are empty. For example, the following CMake template:</p>\n<pre class=\"language-cmake\"><code class=\"language-cmake\">\n<span class=\"token function\">catkin_package</span><span class=\"token punctuation\">(</span>\n  TEMPLATE_START ADD_MSGS ADD_SERVICES ADD_ACTIONS\n  CATKIN_DEPENDS message_runtime\n  TEMPLATE_END\n  <span class=\"token punctuation\">)</span>\n</code></pre>\n<p>includes a dependency on <code>message_runtime</code> if any of <code>ADD_MSGS</code>, <code>ADD_SERVICES</code>, <code>ADD_ACTIONS</code> have a value. The <code>TEMPLATE_*</code> lines are removed from the result, with the output being:</p>\n<pre class=\"language-cmake\"><code class=\"language-cmake\"><span class=\"token function\">catkin_package</span><span class=\"token punctuation\">(</span>\n  CATKIN_DEPENDS message_runtime\n  <span class=\"token punctuation\">)</span>\n</code></pre>\n<p>The opposite relationship (include if <em>all</em> have a value) isn't yet supported, but should be supported in the future.</p>\n<h3>Variable file names</h3>\n<p>File names can be given variable values simply by using the variable name in the filename. For example, a file called <code>MY_VARIABLE.cpp</code> with a runtime value of <code>MY_VARIABLE='object_detector'</code> would be renamed to <code>object_detector.cpp</code>.</p>\n<h3>Conditional file existence</h3>\n<p>Another special file called <code>.files.yaml</code> marks files which should only exist under certain conditions. It's syntax is based on very basic key-value pairs (<code>filename: variable_1 variable_2 ...</code>), with the filed included if <em>any</em> of <code>variable_1 variable_2 ...</code> have a value. See existing templates for examples.</p>\n<h2>Creating your own templates</h2>\n<p>Creating your own templates is almost as simple as using templates. To create your own template:</p>\n<ol>\n<li>\n<p>Clone this repository locally:</p>\n<pre><code>git clone https://github.com/qcr/code_templates\n</code></pre>\n</li>\n<li>\n<p>Make a new folder with the name of your template. For example, a template called <code>my_new_template</code> is denoted by a folder called <code>my_new_template</code>.</p>\n</li>\n<li>\n<p>Create a <code>.variables.yaml</code> file in your new folder. The format is the following:</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">VARIABLE_NAME</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">text</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Text to be displayed to user in prompt\"</span>\n  <span class=\"token key atrule\">default</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Default static value\"</span>\n<span class=\"token key atrule\">VARIABLE_WITH_DYNAMIC_DEFAULT</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">text</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Variable with default value determined at runtime\"</span>\n  <span class=\"token key atrule\">default</span><span class=\"token punctuation\">:</span> $(echo \"This Bash code will be executed\")\n<span class=\"token key atrule\">OPTIONAL_VARIABLE</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">text</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Variable will be left blank if the user provides no input\"</span>\n  <span class=\"token key atrule\">default</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n</code></pre>\n</li>\n<li>\n<p>Create the files for your template, taking advantage of whichever <a href=\"#how-templates-work\">variable features</a> your template requires.</p>\n</li>\n<li>\n<p><strong>Test</strong> your template locally before pushing to master (as soon as it's pushed everyone can use it). Test locally by directly running the <code>use_template</code> script with local files instead of the remote:</p>\n<pre><code>LOCAL_LOCATION=/path/to/local/clone/of/this/repo ./use_template my_new_template\n</code></pre>\n</li>\n<li>\n<p>Once it works, push to the master branch. Done!</p>\n</li>\n</ol>\n<p>Please note: a very crude YAML parser is written in <a href=\"./use_template\"><code>use_template</code></a> to keep the dependencies of this software as low as possible. I emphasise, <em>crude</em>. You should not expect full YAML functionality (keep values on same line as key, don't use line breaks, no escape characters, etc.).</p>\n","name":"QCR's Code Templates","type":"code","url":"https://github.com/qcr/code_templates","image":"https://github.com/qcr/code_templates/wiki/demo.gif","_images":["/_next/static/images/demo-70a6816faa1e78bf2b6f4c8115a1a047.webm","/_next/static/images/demo-70a6816faa1e78bf2b6f4c8115a1a047.mp4","/_next/static/images/demo-70a6816faa1e78bf2b6f4c8115a1a047.webp","/_next/static/images/demo-70a6816faa1e78bf2b6f4c8115a1a047.jpg"],"src":"/content/qcr/code_templates.md","id":"code-templates","image_position":"center"}},"__N_SSG":true}