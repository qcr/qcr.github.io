{"pageProps":{"codeData":{"content":"<h1>QuadricSLAM</h1>\n<p><a href=\"https://qcr.github.io\"><picture><img alt=\"QUT Centre for Robotics Open Source\" src=\"https://github.com/qcr/qcr.github.io/raw/master/misc/badge.svg\"></picture></a>\n<picture><img alt=\"Primary language\" src=\"https://img.shields.io/github/languages/top/qcr/quadricslam\"></picture>\n<a href=\"https://pypi.org/project/quadricslam/\"><picture><img alt=\"PyPI package\" src=\"https://img.shields.io/pypi/pyversions/quadricslam\"></picture></a>\n<a href=\"./LICENSE.txt\"><picture><img alt=\"License\" src=\"https://img.shields.io/github/license/qcr/quadricslam\"></picture></a></p>\n<p>QuadricSLAM is a system for using <a href=\"https://en.wikipedia.org/wiki/Quadric\">quadrics</a> to represent objects in a scene, leveraging common optimisation tools for simultaneous localisation and mapping (SLAM) problems to converge on stable object maps and camera trajectories. This library uses <a href=\"https://github.com/borglab/gtsam\">Georgia Tech's Smoothing and Mapping (GTSAM)</a> library for factor graph optimisation, and adds support through our custom <a href=\"https://github.com/qcr/gtsam-quadrics\">GTSAM quadrics</a> extension.</p>\n<p>TODO update with a more holistic reflection of the repository in its current state\n<a href=\"https://www.youtube.com/watch?v=n-j0DFDFSKU\"><picture><img alt=\"@youtube QuadricSLAM demonstration for RA-L\" src=\"https://github.com/qcr/gtsam-quadrics/raw/master/doc/quadricslam_video.png\"></picture></a></p>\n<p>The key features of this repository are:</p>\n<ul>\n<li>modular abstractions that allow building QuadricSLAM solutions with custom tools:<pre class=\"language-python\"><code class=\"language-python\">q <span class=\"token operator\">=</span> QuadricSLAM<span class=\"token punctuation\">(</span>data_source<span class=\"token operator\">=</span>MyDataSource<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> detector<span class=\"token operator\">=</span>MyDetector<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> associator<span class=\"token operator\">=</span>MyDataAssociator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nq<span class=\"token punctuation\">.</span>spin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n</li>\n<li>basic Matplotlib visualisation routines</li>\n<li>a rich set of plug-n-play examples of the QuadricSLAM system:\n<ul>\n<li>simple \"hello_world\" examples with dummy data</li>\n<li>running on the <a href=\"https://vision.in.tum.de/data/datasets/rgbd-dataset\">TUM RGB-D dataset</a>, as done in <a href=\"#citing-our-work\">our paper</a> TODO</li>\n<li>plug-n-play on a <a href=\"https://www.intelrealsense.com/depth-camera-d435i/\">Intel RealSense D435i</a> with Python TODO</li>\n<li>plug-n-play on a <a href=\"https://www.intelrealsense.com/depth-camera-d435i/\">Intel RealSense D435i</a> in a ROS ecosystem TODO</li>\n<li>using data from photorealistic 3D simulation through an <a href=\"https://github.com/qcr/benchbot_addons\">add-on</a> for the <a href=\"https://github.com/qcr/benchbot\">BenchBot ecosystem</a> TODO</li>\n</ul>\n</li>\n</ul>\n<p>We expect this repository to be active and continually improved upon. If you have any feature requests or experience any bugs, don't hesitate to let us know. Our code is free to use, and licensed under BSD-3. We simply ask that you <a href=\"#citing-our-work\">cite our work</a> if you use QuadricSLAM in your own research.</p>\n<h2>Installation and using the library</h2>\n<p>Pre-build wheels of this library are <a href=\"https://pypi.org/project/quadricslam/\">available on PyPI</a> for most Linux systems, as well as source distributions. Install the library with:</p>\n<pre><code>pip install quadricslam\n</code></pre>\n<p>From here basic custom QuadricSLAM systems can be setup by implementing and integrating the following abstract classes:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> quadricslam <span class=\"token keyword\">import</span> DataSource<span class=\"token punctuation\">,</span> Detector<span class=\"token punctuation\">,</span> Associator<span class=\"token punctuation\">,</span> visualise\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyDataSource</span><span class=\"token punctuation\">(</span>DataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyDetector</span><span class=\"token punctuation\">(</span>Detector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyAssociator</span><span class=\"token punctuation\">(</span>Associator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\nq <span class=\"token operator\">=</span> QuadricSlam<span class=\"token punctuation\">(</span>data_source<span class=\"token operator\">=</span>MyDataSource<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                detector<span class=\"token operator\">=</span>MyDetector<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                associator<span class=\"token operator\">=</span>MyAssociator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                on_new_estimate<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> vals<span class=\"token punctuation\">,</span> labels<span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">:</span> visualise<span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">,</span> labels<span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\nq<span class=\"token punctuation\">.</span>spin<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>The examples described below also provide code showing how to create customisations for a range of different scenarios.</p>\n<h2>Running the examples from this repository</h2>\n<p><em>Note: in the spirit of keeping this package light, some dependencies may not be installed; please install those manually</em></p>\n<p>This repository contains a number of examples to demonstrate how QuadricSLAM systems can be set up in different contexts.</p>\n<p>Each example is a file in the <code>quadricslam_examples</code> module, with a standalone <code>run()</code> function. There are two possible ways to run each example:</p>\n<ol>\n<li>\n<p>Directly through the command line:</p>\n<pre><code>python -m quadricslam_examples.EXAMPLE_NAME ARGS ...\n</code></pre>\n<p>e.g for the <code>hello_quadricslam</code> examples:</p>\n<pre><code>python -m quadricslam_examples.hello_quadricslam\n</code></pre>\n</li>\n<li>\n<p>Or from within Python:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> quadricslam_examples<span class=\"token punctuation\">.</span>EXAMPLE_NAME <span class=\"token keyword\">import</span> run\nrun<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n</li>\n</ol>\n<h3><code>hello_manual_quadricslam</code></h3>\n<p>Shows how to create a QuadricSLAM system from scratch using the primitives exposed by our <a href=\"https://github.com/qcr/gtsam-quadrics\">GTSAM Quadrics library</a>. The scenario is 4 viewpoints in a square around 2 quadrics in the middle of the square:</p>\n<p><picture><img alt=\"hello_manual_quadricslam example\" src=\"https://github.com/qcr/quadricslam/wiki/hello_quadricslam.jpg\"></picture></p>\n<h3><code>hello_quadricslam</code></h3>\n<p>Same scenario as the <code>hello_manual_quadricslam</code> example, but uses the abstractions provided by this library. Shows how an entire QuadricSLAM system can be created with only a few lines of code when the appropriate components are available:</p>\n<p><picture><img alt=\"hello_quadricslam example\" src=\"https://github.com/qcr/quadricslam/wiki/hello_quadricslam.jpg\"></picture></p>\n<h3><code>tum_rgbd_dataset</code></h3>\n<p>Re-creation of the TUM RGBD dataset experiments used in our <a href=\"#citing-our-work\">initial publication</a>. There is a script included for downloading the dataset.</p>\n<p><picture><img alt=\"tum_rgbd_dataset example\" src=\"https://github.com/qcr/quadricslam/wiki/tum_rgbd.jpg\"></picture></p>\n<p><em>Note: the paper used hand-annotated data to avoid the data association problem; as a result the example here requires a custom data associator to be created before it will run</em></p>\n<h3><code>realsense_python</code></h3>\n<p>Demonstrates how a system can be run using an RGBD RealSense, the <a href=\"https://pypi.org/project/pyrealsense2/\">pyrealsense2</a> library, and a barebones OpenCV visual odometry algorithm.</p>\n<p>The example is a simple plug-n-play system, with weak localisation and data association:</p>\n<p><picture><img alt=\"realsense_python example\" src=\"https://github.com/qcr/quadricslam/wiki/realsense_python.jpg\"></picture></p>\n<h3><code>realsense_ros</code></h3>\n<p>Demonstrates how a ROS QuadricSLAM system can be put together with an RGBD RealSense, the <a href=\"https://github.com/IntelRealSense/realsense-ros\">ROS RealSense</a> library, and <a href=\"https://github.com/MIT-SPARK/Kimera-VIO-ROS\">Kimera VIO's visual odometry system</a>.</p>\n<p>This example includes a script for creating an entire ROS workspace containing all the required packages built from source. Once installed, it runs the same as the <code>realsense_python</code> example but with significantly better localisation:</p>\n<p><picture><img alt=\"realsense_ros example\" src=\"https://github.com/qcr/quadricslam/wiki/realsense_ros.jpg\"></picture></p>\n<h2>Citing our work</h2>\n<p>If you are using this library in academic work, please cite the <a href=\"https://ieeexplore.ieee.org/document/8440105\">publication</a>:</p>\n<p>L. Nicholson, M. Milford and N. Sünderhauf, \"QuadricSLAM: Dual Quadrics From Object Detections as Landmarks in Object-Oriented SLAM,\" in IEEE Robotics and Automation Letters, vol. 4, no. 1, pp. 1-8, Jan. 2019, doi: 10.1109/LRA.2018.2866205. <a href=\"https://arxiv.org/abs/1804.04011\">PDF</a>.</p>\n<pre class=\"language-bibtex\"><code class=\"language-bibtex\">@article{nicholson2019,\n  title={QuadricSLAM: Dual Quadrics From Object Detections as Landmarks in Object-Oriented SLAM},\n  author={Nicholson, Lachlan and Milford, Michael and Sünderhauf, Niko},\n  journal={IEEE Robotics and Automation Letters},\n  year={2019},\n}\n</code></pre>\n","name":"QuadricSLAM","type":"code","url":"https://github.com/qcr/quadricslam","image":"https://github.com/qcr/gtsam-quadrics/raw/master/doc/quadricslam_video.png","_images":["/_next/static/images/quadricslam_video-412d8ad8190b4f7eee1320faf254cd6f.png.webp","/_next/static/images/quadricslam_video-a4d673ea6414754e153004c137d2a2c1.png"],"src":"/content/quadricslam/quadricslam.md","id":"quadricslam","image_position":"center"}},"__N_SSG":true}