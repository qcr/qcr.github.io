{"pageProps":{"codeData":{"content":"<h1>Patch-NetVLAD: Multi-Scale Fusion of Locally-Global Descriptors for Place Recognition</h1>\n<p><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"><picture><img alt=\"License: MIT\" src=\"https://img.shields.io/badge/License-MIT-yellow.svg?style=flat-square\"></picture></a>\n<a href=\"https://github.com/QVPR/Patch-NetVLAD/stargazers\"><picture><img alt=\"stars\" src=\"https://img.shields.io/github/stars/QVPR/Patch-NetVLAD.svg?style=flat-square\"></picture></a>\n<a href=\"https://github.com/QVPR/Patch-NetVLAD/issues\"><picture><img alt=\"GitHub issues\" src=\"https://img.shields.io/github/issues/QVPR/Patch-NetVLAD.svg?style=flat-square\"></picture></a>\n<a href=\"https://github.com/QVPR/Patch-NetVLAD/issues?q=is%3Aissue+is%3Aclosed\"><picture><img alt=\"GitHub closed issues\" src=\"https://img.shields.io/github/issues-closed-raw/QVPR/Patch-NetVLAD?style=flat-square\"></picture></a>\n<a href=\"./README.md\"><picture><img alt=\"GitHub repo size\" src=\"https://img.shields.io/github/repo-size/QVPR/Patch-NetVLAD.svg?style=flat-square\"></picture></a>\n<a href=\"https://qcr.github.io/collection/vpr_overview/\"><picture><img alt=\"QUT Centre for Robotics\" src=\"https://img.shields.io/badge/collection-QUT%20Robotics-%23043d71?style=flat-square\"></picture></a></p>\n<p><a href=\"https://paperswithcode.com/sota/visual-localization-on-extended-cmu-seasons?p=patch-netvlad-multi-scale-fusion-of-locally\"><picture><img alt=\"PWC\" src=\"https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/patch-netvlad-multi-scale-fusion-of-locally/visual-localization-on-extended-cmu-seasons&amp;style=flat-square\"></picture></a>\n<a href=\"https://paperswithcode.com/sota/visual-place-recognition-on-mapillary-val?p=patch-netvlad-multi-scale-fusion-of-locally\"><picture><img alt=\"PWC\" src=\"https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/patch-netvlad-multi-scale-fusion-of-locally/visual-place-recognition-on-mapillary-val&amp;style=flat-square\"></picture></a>\n<a href=\"https://paperswithcode.com/sota/visual-place-recognition-on-nordland?p=patch-netvlad-multi-scale-fusion-of-locally\"><picture><img alt=\"PWC\" src=\"https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/patch-netvlad-multi-scale-fusion-of-locally/visual-place-recognition-on-nordland&amp;style=flat-square\"></picture></a>\n<a href=\"https://paperswithcode.com/sota/visual-place-recognition-on-pittsburgh-30k?p=patch-netvlad-multi-scale-fusion-of-locally\"><picture><img alt=\"PWC\" src=\"https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/patch-netvlad-multi-scale-fusion-of-locally/visual-place-recognition-on-pittsburgh-30k&amp;style=flat-square\"></picture></a>\n<a href=\"https://paperswithcode.com/sota/visual-localization-on-robotcar-seasons-v2?p=patch-netvlad-multi-scale-fusion-of-locally\"><picture><img alt=\"PWC\" src=\"https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/patch-netvlad-multi-scale-fusion-of-locally/visual-localization-on-robotcar-seasons-v2&amp;style=flat-square\"></picture></a>\n<a href=\"https://paperswithcode.com/sota/visual-place-recognition-on-tokyo247?p=patch-netvlad-multi-scale-fusion-of-locally\"><picture><img alt=\"PWC\" src=\"https://img.shields.io/endpoint.svg?url=https://paperswithcode.com/badge/patch-netvlad-multi-scale-fusion-of-locally/visual-place-recognition-on-tokyo247&amp;style=flat-square\"></picture></a></p>\n<p>This repository contains code for the CVPR2021 paper \"Patch-NetVLAD: Multi-Scale Fusion of Locally-Global Descriptors for Place Recognition\"</p>\n<p>The article can be found on <a href=\"https://arxiv.org/abs/2103.01486\">arXiv</a> and the <a href=\"https://openaccess.thecvf.com/content/CVPR2021/html/Hausler_Patch-NetVLAD_Multi-Scale_Fusion_of_Locally-Global_Descriptors_for_Place_Recognition_CVPR_2021_paper.html\">official proceedings</a>.</p>\n<p style=\"width: 50%; display: block; margin-left: auto; margin-right: auto\">\n  <picture><img alt=\"Patch-NetVLAD method diagram\" src=\"https:/github.com/QVPR/Patch-NetVLAD/raw/HEAD/assets/patch_netvlad_method_diagram.png\"></picture>\n</p>\n<h2>License + attribution/citation</h2>\n<p>When using code within this repository, please refer the following <a href=\"https://openaccess.thecvf.com/content/CVPR2021/html/Hausler_Patch-NetVLAD_Multi-Scale_Fusion_of_Locally-Global_Descriptors_for_Place_Recognition_CVPR_2021_paper.html\">paper</a> in your publications:</p>\n<pre><code>@inproceedings{hausler2021patchnetvlad,\n  title={Patch-NetVLAD: Multi-Scale Fusion of Locally-Global Descriptors for Place Recognition},\n  author={Hausler, Stephen and Garg, Sourav and Xu, Ming and Milford, Michael and Fischer, Tobias},\n  booktitle={Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition},\n  pages={14141--14152},\n  year={2021}\n}\n</code></pre>\n<p>The code is licensed under the <a href=\"./LICENSE\">MIT License</a>.</p>\n<h2>Installation</h2>\n<p>We recommend using conda (or better: mamba) to install all dependencies. If you have not yet installed conda/mamba, please download and install <a href=\"https://github.com/conda-forge/miniforge\"><code>mambaforge</code></a>. Note that <a href=\"https://github.com/QVPR/Patch-NetVLAD/issues/75\">issues with recent NumPy versions have been reported</a> - please use <code>numpy=1.21</code> which we know works.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># On Linux:</span>\nconda create -n patchnetvlad python <span class=\"token assign-left variable\">numpy</span><span class=\"token operator\">=</span><span class=\"token number\">1.21</span> pytorch-gpu torchvision natsort tqdm opencv pillow scikit-learn faiss matplotlib-base -c conda-forge\n<span class=\"token comment\"># On MacOS (x86 Intel processor):</span>\nconda create -n patchnetvlad python <span class=\"token assign-left variable\">numpy</span><span class=\"token operator\">=</span><span class=\"token number\">1.21</span> pytorch torchvision natsort tqdm opencv pillow scikit-learn faiss matplotlib-base -c conda-forge\n<span class=\"token comment\"># On MacOS (ARM M1/M2 processor):</span>\nconda create -n patchnetvlad python <span class=\"token assign-left variable\">numpy</span><span class=\"token operator\">=</span><span class=\"token number\">1.21</span> pytorch torchvision natsort tqdm opencv pillow scikit-learn faiss matplotlib-base -c conda-forge -c tobiasrobotics\n<span class=\"token comment\"># On Windows:</span>\nconda create -n patchnetvlad python <span class=\"token assign-left variable\">numpy</span><span class=\"token operator\">=</span><span class=\"token number\">1.21</span> natsort tqdm opencv pillow scikit-learn faiss matplotlib-base -c conda-forge\nconda activate patchnetvlad\nconda <span class=\"token function\">install</span> pytorch torchvision torchaudio pytorch-cuda<span class=\"token operator\">=</span><span class=\"token number\">11.7</span> -c pytorch -c nvidia\n\nconda activate patchnetvlad\n</code></pre>\n<p>We provide several pre-trained models and configuration files. The pre-trained models will be downloaded automatically into the <code>pretrained_models</code> the first time feature extraction is performed.</p>\n<details>\n  <summary>Alternatively, you can manually download the pre-trained models into a folder of your choice; click to expand if you want to do so.</summary>\n<p>We recommend downloading the models into the <code>pretrained_models</code> folder (which is setup in the config files within the <code>configs</code> directory):</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Note: the pre-trained models will be downloaded automatically the first time feature extraction is performed</span>\n<span class=\"token comment\"># the steps below are optional!</span>\n\n<span class=\"token comment\"># You can use the download script which automatically downloads the models:</span>\npython ./download_models.py\n\n<span class=\"token comment\"># Manual download:</span>\n<span class=\"token builtin class-name\">cd</span> pretrained_models\n<span class=\"token function\">wget</span> -O mapillary_WPCA128.pth.tar https://huggingface.co/TobiasRobotics/Patch-NetVLAD/resolve/main/mapillary_WPCA128.pth.tar?download<span class=\"token operator\">=</span>true\n<span class=\"token function\">wget</span> -O mapillary_WPCA512.pth.tar https://huggingface.co/TobiasRobotics/Patch-NetVLAD/resolve/main/mapillary_WPCA512.pth.tar?download<span class=\"token operator\">=</span>true\n<span class=\"token function\">wget</span> -O mapillary_WPCA4096.pth.tar https://huggingface.co/TobiasRobotics/Patch-NetVLAD/resolve/main/mapillary_WPCA4096.pth.tar?download<span class=\"token operator\">=</span>true\n<span class=\"token function\">wget</span> -O pittsburgh_WPCA128.pth.tar https://huggingface.co/TobiasRobotics/Patch-NetVLAD/resolve/main/pitts_WPCA128.pth.tar?download<span class=\"token operator\">=</span>true\n<span class=\"token function\">wget</span> -O pittsburgh_WPCA512.pth.tar https://huggingface.co/TobiasRobotics/Patch-NetVLAD/resolve/main/pitts_WPCA512.pth.tar?download<span class=\"token operator\">=</span>true\n<span class=\"token function\">wget</span> -O pittsburgh_WPCA4096.pth.tar https://huggingface.co/TobiasRobotics/Patch-NetVLAD/resolve/main/pitts_WPCA4096.pth.tar?download<span class=\"token operator\">=</span>true\n<span class=\"token function\">wget</span> -O landmarks_WPCA4096.pth.tar https://huggingface.co/TobiasRobotics/Patch-NetVLAD/resolve/main/landmarks_WPCA4096.pth.tar?download<span class=\"token operator\">=</span>true\n</code></pre>\n</details>\n<p>If you want to use the shortcuts <code>patchnetvlad-match-two</code>, <code>patchnetvlad-feature-match</code> and <code>patchnetvlad-feature-extract</code>, you also need to run (which also lets you use Patch-NetVLAD in a modular way):</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">pip3 <span class=\"token function\">install</span> --no-deps -e <span class=\"token builtin class-name\">.</span>\n</code></pre>\n<h2>Quick start</h2>\n<h3>Feature extraction</h3>\n<p>Replace <code>performance.ini</code> with <code>speed.ini</code> or <code>storage.ini</code> if you want, and adapt the dataset paths - examples are given for the Pittsburgh30k dataset (simply replace <code>pitts30k</code> with <code>tokyo247</code> or <code>nordland</code> for these datasets).</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">python feature_extract.py <span class=\"token punctuation\">\\</span>\n  --config_path patchnetvlad/configs/performance.ini <span class=\"token punctuation\">\\</span>\n  --dataset_file_path<span class=\"token operator\">=</span>pitts30k_imageNames_index.txt <span class=\"token punctuation\">\\</span>\n  --dataset_root_dir<span class=\"token operator\">=</span>/path/to/your/pitts/dataset <span class=\"token punctuation\">\\</span>\n  --output_features_dir patchnetvlad/output_features/pitts30k_index\n</code></pre>\n<p>Repeat for the query images by replacing <code>_index</code> with <code>_query</code>. Note that you have to adapt <code>dataset_root_dir</code>.</p>\n<h3>Feature matching (dataset)</h3>\n<pre class=\"language-bash\"><code class=\"language-bash\">python feature_match.py <span class=\"token punctuation\">\\</span>\n  --config_path patchnetvlad/configs/performance.ini <span class=\"token punctuation\">\\</span>\n  --dataset_root_dir<span class=\"token operator\">=</span>/path/to/your/pitts/dataset <span class=\"token punctuation\">\\</span>\n  --query_file_path<span class=\"token operator\">=</span>pitts30k_imageNames_query.txt <span class=\"token punctuation\">\\</span>\n  --index_file_path<span class=\"token operator\">=</span>pitts30k_imageNames_index.txt <span class=\"token punctuation\">\\</span>\n  --query_input_features_dir patchnetvlad/output_features/pitts30k_query <span class=\"token punctuation\">\\</span>\n  --index_input_features_dir patchnetvlad/output_features/pitts30k_index <span class=\"token punctuation\">\\</span>\n  --ground_truth_path patchnetvlad/dataset_gt_files/pitts30k_test.npz <span class=\"token punctuation\">\\</span>\n  --result_save_folder patchnetvlad/results/pitts30k\n</code></pre>\n<p>Note that providing <code>ground_truth_path</code> is optional.</p>\n<p>This will create three output files in the folder specified by <code>result_save_folder</code>:</p>\n<ul>\n<li><code>recalls.txt</code> with a plain text output (only if <code>ground_truth_path</code> is specified)</li>\n<li><code>NetVLAD_predictions.txt</code> with top 100 reference images for each query images obtained using \"vanilla\" NetVLAD in <a href=\"https://github.com/naver/kapture\">Kapture format</a></li>\n<li><code>PatchNetVLAD_predictions.txt</code> with top 100 reference images from above re-ranked by Patch-NetVLAD, again in <a href=\"https://github.com/naver/kapture\">Kapture format</a></li>\n</ul>\n<h3>Feature matching (two files)</h3>\n<pre class=\"language-bash\"><code class=\"language-bash\">python match_two.py <span class=\"token punctuation\">\\</span>\n--config_path patchnetvlad/configs/performance.ini <span class=\"token punctuation\">\\</span>\n--first_im_path<span class=\"token operator\">=</span>patchnetvlad/example_images/tokyo_query.jpg <span class=\"token punctuation\">\\</span>\n--second_im_path<span class=\"token operator\">=</span>patchnetvlad/example_images/tokyo_db.png\n</code></pre>\n<p>We provide the <code>match_two.py</code> script which computes the Patch-NetVLAD features for two given images and then determines the local feature matching between these images. While we provide example images, any image pair can be used.</p>\n<p>The script will print a score value as an output, where a larger score indicates more similar images and a lower score means dissimilar images. The function also outputs a matching figure, showing the patch correspondances (after RANSAC) between the two images. The figure is saved as <code>results/patchMatchings.png</code>.</p>\n<h3>Training</h3>\n<pre class=\"language-bash\"><code class=\"language-bash\">python train.py <span class=\"token punctuation\">\\</span>\n--config_path patchnetvlad/configs/train.ini <span class=\"token punctuation\">\\</span>\n--cache_path<span class=\"token operator\">=</span>/path/to/your/desired/cache/folder <span class=\"token punctuation\">\\</span>\n--save_path<span class=\"token operator\">=</span>/path/to/your/desired/checkpoint/save/folder <span class=\"token punctuation\">\\</span>\n--dataset_root_dir<span class=\"token operator\">=</span>/path/to/your/mapillary/dataset\n</code></pre>\n<p>To begin, request, download and unzip the Mapillary Street-level Sequences dataset (https://github.com/mapillary/mapillary_sls).\nThe provided script will train a new network from scratch, to resume training add --resume_path and set to a full path, filename and extension to an existing checkpoint file. Note to resume our provided models, first remove the WPCA layers.</p>\n<p>After training a model, PCA can be added using add_pca.py.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">python add_pca.py <span class=\"token punctuation\">\\</span>\n--config_path patchnetvlad/configs/train.ini <span class=\"token punctuation\">\\</span>\n--resume_path<span class=\"token operator\">=</span>full/path/with/extension/to/your/saved/checkpoint <span class=\"token punctuation\">\\</span>\n--dataset_root_dir<span class=\"token operator\">=</span>/path/to/your/mapillary/dataset\n</code></pre>\n<p>This will add an additional checkpoint file to the same folder as resume_path, except including a WPCA layer.</p>\n<h2>FAQ</h2>\n<p><picture><img alt=\"Patch-NetVLAD qualitative results\" src=\"https:/github.com/QVPR/Patch-NetVLAD/raw/HEAD/assets/patch_netvlad_qualitative_results.jpg\"></picture></p>\n<h3>How to Create New Ground Truth Files</h3>\n<p>We provide three ready-to-go ground truth files in the dataset_gt_files folder, however, for evaluation on other datasets you will need to create your own .npz ground truth data files.\nEach .npz stores three variables: <code>utmQ</code> (a numpy array of floats), <code>utmDb</code> (a numpy array of floats) and <code>posDistThr</code> (a scalar numpy float).</p>\n<p>Each successive element within <code>utmQ</code> and <code>utmDb</code> needs to correspond to the corresponding row of the image list file. <code>posDistThr</code> is the ground truth tolerance value (typically in meters).</p>\n<p>The following mock example details the steps required to create a new ground truth file:</p>\n<ol>\n<li>Collect GPS data for your query and database traverses and convert to utm format. Ensure the data is sampled at the same rate as your images.</li>\n<li>Select your own choice of posDistThr value.</li>\n<li>Save these variables using Numpy, such as this line of code:\n<code>np.savez('dataset_gt_files/my_dataset.npz', utmQ=my_utmQ, utmDb=my_utmDb, posDistThr=my_posDistThr)</code></li>\n</ol>\n<h2>Acknowledgements</h2>\n<p>We would like to thank Gustavo Carneiro, Niko Suenderhauf and Mark Zolotas for their valuable comments in preparing this paper. This work received funding from the Australian Government, via grant AUSMURIB000001 associated with ONR MURI grant N00014-19-1-2571. The authors acknowledge continued support from the Queensland University of Technology (QUT) through the Centre for Robotics.</p>\n<h2>Related works</h2>\n<p>Please check out <a href=\"https://qcr.github.io/collection/vpr_overview/\">this collection</a> of related works on place recognition.</p>\n","name":"Patch-NetVLAD","type":"code","url":"https://github.com/QVPR/Patch-NetVLAD","id":"patchnetvlad_code","image":"./assets/patch_netvlad_method_diagram.png","_images":["/_next/static/images/patch_netvlad_method_diagram-a9187148aad4ff631ce8f55f695459ec.png.webp","/_next/static/images/patch_netvlad_method_diagram-26dab363c927eaf0c0020decf330646e.png"],"src":"/content/visual_place_recognition/patchnetvlad.md","image_position":"center"}},"__N_SSG":true}